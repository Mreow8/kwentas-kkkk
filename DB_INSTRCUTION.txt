# Cloud SQL Proxy Instructions for GCP PostgreSQL

## 1. Local Development

To connect your local Django app to your GCP PostgreSQL instance, you need to run the Cloud SQL Proxy. This will forward a local port (127.0.0.1:5432) to your Cloud SQL instance.

### Step-by-step:

1. Download and install the Cloud SQL Proxy  
   See: https://cloud.google.com/sql/docs/postgres/connect-admin-proxy#install

2. Authenticate with Google Cloud  
   Make sure you are authenticated with an account that has access to the Cloud SQL instance:
   ```
   gcloud auth login
   gcloud config set project kwentas-klaras-pmis
   ```

3. Start the Cloud SQL Proxy  
   Run this command in your terminal:
   ```
   cloud-sql-proxy --address 127.0.0.1 --port 5432 kwentas-klaras-pmis:asia-southeast1:kwentasklaras-db
   ```
   - This will listen on 127.0.0.1:5432 and forward all traffic to your Cloud SQL PostgreSQL instance.

4. Configure Django to use PostgreSQL  
   In your `settings.py` (or via environment variables), set:
   ```python
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.postgresql',
           'NAME': '<your_db_name>',
           'USER': '<your_db_user>',
           'PASSWORD': '<your_db_password>',
           'HOST': '127.0.0.1',
           'PORT': '5432',
       }
   }
   ```
   - Replace `<your_db_name>`, `<your_db_user>`, and `<your_db_password>` with your actual database credentials.

5. Run your Django server
   ```
   python manage.py runserver
   ```
   Your app will now connect to the GCP PostgreSQL instance via the proxy.

---

## 2. Cloud Run Deployment

When deploying to Cloud Run, you do **not** need to run the proxy manually. Instead, you configure your service to use the Cloud SQL Auth Proxy as a sidecar or use the built-in Cloud SQL connection.

- In Cloud Run, set the `DB_HOST` to `/cloudsql/kwentas-klaras-pmis:asia-southeast1:kwentasklaras-db`
- Your `settings.py` should look like:
  ```python
  import os
  DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.postgresql',
          'NAME': os.environ.get('DB_NAME'),
          'USER': os.environ.get('DB_USER'),
          'PASSWORD': os.environ.get('DB_PASSWORD'),
          'HOST': os.environ.get('DB_HOST', '/cloudsql/kwentas-klaras-pmis:asia-southeast1:kwentasklaras-db'),
          'PORT': os.environ.get('DB_PORT', '5432'),
      }
  }
  ```
- In your Cloud Run service configuration, set the environment variables accordingly.
- In the Cloud Run deployment YAML or via the GCP Console, add the Cloud SQL instance connection under "Connections" > "Cloud SQL connections".

---

## Summary Table

| Environment      | Host Setting                                 | How to Connect                |
|------------------|----------------------------------------------|-------------------------------|
| Local Dev        | 127.0.0.1 (via Cloud SQL Proxy)              | Run `cloud-sql-proxy` locally |
| Cloud Run        | /cloudsql/INSTANCE_CONNECTION_NAME           | Add Cloud SQL connection      |

---

## Example Cloud SQL Proxy Command




##For Assistance please contact Hanz Archer Dalubatan